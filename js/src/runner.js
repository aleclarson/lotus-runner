// Generated by CoffeeScript 1.10.0
(function() {
  var NamedFunction, Runner, async, define, dirname, escapeStringRegexp, isAbsolute, isKind, isType, join, loadSpecPaths, log, lotus, ref, ref1, ref2, resolve, sep, sync;

  lotus = require("lotus-require");

  define = require("define");

  log = require("lotus-log");

  NamedFunction = require("named-function");

  escapeStringRegexp = require("escape-string-regexp");

  ref = require("path"), isAbsolute = ref.isAbsolute, dirname = ref.dirname, join = ref.join, resolve = ref.resolve, sep = ref.sep;

  ref1 = require("type-utils"), isType = ref1.isType, isKind = ref1.isKind;

  ref2 = require("io"), sync = ref2.sync, async = ref2.async;

  Runner = NamedFunction("Runner", function(options) {
    var sepIndex;
    if (!(this instanceof Runner)) {
      return new Runner(options);
    }
    if (options == null) {
      options = {};
    }
    if (!isType(options.suite, String)) {
      throw TypeError("'options.suite' must be a String");
    }
    if (isType(options.reporter, String)) {
      options.reporter = module.optional(options.reporter);
    }
    if (!isType(options.extensions, String)) {
      options.extensions = "js";
    }
    this.suite = require(options.suite);
    this.suite.name = this.suite.path.slice(0, sepIndex = this.suite.path.indexOf(sep));
    this.suite.dir = dirname(require.resolve(this.suite.name));
    this.suite.entry = join(this.suite.dir, this.suite.path.slice(sepIndex));
    this.suite.load(options);
    this.extensions = RegExp(".*\\.(" + options.extensions + ")$", "i");
    return this;
  });

  define(function() {
    this.options = {
      writable: false,
      configurable: false
    };
    this(module, {
      exports: Runner
    });
    return this(Runner.prototype, {
      start: function(paths) {
        if (isType(paths, String)) {
          paths = [paths];
        }
        if (!isKind(paths, Array)) {
          throw TypeError("'paths' must be an Array or String");
        }
        return loadSpecPaths(paths).then((function(_this) {
          return function(specs) {
            if (specs.length === 0) {
              throw Error("No specs were found.");
            }
            specs.sort(function(a, b) {
              return a.localeCompare(b);
            });
            sync.each(specs, function(spec) {
              var pwd;
              delete require.cache[spec];
              pwd = process.cwd();
              process.chdir(dirname(spec));
              log.it("Loading spec: " + spec);
              module.optional(spec, function(error) {
                log.origin("lotus-runner");
                log("Failed while loading a spec: ");
                log.red(spec);
                log.moat(1);
                throw error;
              });
              return process.chdir(pwd);
            });
            global.log = log;
            return async["try"](function() {
              return _this.suite.start();
            });
          };
        })(this));
      }
    });
  });

  loadSpecPaths = function(paths) {
    return async.reduce(paths, [], function(specs, path) {
      if (!isType(path, String)) {
        async["throw"]({
          error: TypeError("'path' should be a String."),
          format: {
            repl: {
              path: path
            }
          }
        });
      }
      path = resolve(path);
      return async.isDir(path).then(function(isDir) {
        if (!isDir) {
          specs.push(path);
          async["throw"]({
            fatal: false
          });
        }
        return async.readDir(path).then(function(files) {
          return async.each(files, function(file) {
            var isFile, spec;
            spec = join(path, file);
            isFile = sync.isFile(spec);
            if (isFile) {
              specs.push(spec);
            }
          });
        });
      }).fail(async["catch"]).then(function() {
        return specs;
      });
    });
  };

}).call(this);
