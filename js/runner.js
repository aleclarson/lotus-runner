// Generated by CoffeeScript 1.12.4
var Benchmark, Runner, Type, assertType, clearRequire, fs, path, type;

clearRequire = require("clear-require");

assertType = require("assertType");

Benchmark = require("benchmark");

Type = require("Type");

path = require("path");

fs = require("fsx");

type = Type("TestRunner");

type.defineArgs(function() {
  return {
    types: {
      suite: String,
      reporter: String,
      bench: Boolean
    },
    defaults: {
      suite: "lotus-jasmine",
      reporter: "lotus-jasmine/reporter",
      bench: false
    }
  };
});

type.defineFrozenValues(function(options) {
  return {
    suite: this._loadSuite(options.suite),
    reporter: this._loadReporter(options.reporter)
  };
});

type.initInstance(function(options) {
  global.emptyFunction = require("emptyFunction");
  global.Benchmark = options.bench ? Benchmark : null;
  return this.suite.load({
    reporter: this.reporter
  });
});

type.defineMethods({
  start: function(specs) {
    assertType(specs, Array);
    specs.sort(function(a, b) {
      return a.localeCompare(b);
    });
    return this._loadPaths(specs).then(function(paths) {
      return paths.forEach(function(spec) {
        var error;
        clearRequire(spec);
        try {
          return require(spec);
        } catch (error1) {
          error = error1;
          log.moat(1);
          log.white("Failed to load test: ");
          log.red(spec);
          log.moat(0);
          log.gray(error.stack);
          return log.moat(1);
        }
      });
    }).then((function(_this) {
      return function() {
        return _this.suite.start();
      };
    })(this));
  },
  _loadSuite: function(suitePath) {
    var error, suite;
    try {
      suite = require(suitePath);
    } catch (error1) {
      error = error1;
      log.moat(1);
      log.yellow("Warning: ");
      log.white("The '" + suitePath + "' testing suite threw an error!");
      log.moat(0);
      log.gray(error.stack);
      log.moat(1);
    }
    return suite;
  },
  _loadReporter: function(reporterPath) {
    var error, reporter;
    if (!reporterPath) {
      return;
    }
    try {
      reporter = require(reporterPath);
    } catch (error1) {
      error = error1;
      log.moat(1);
      log.yellow("Warning: ");
      log.white("The '" + reporterPath + "' test reporter threw an error!");
      log.moat(0);
      log.gray(error.stack);
      log.moat(1);
    }
    return reporter;
  },
  _loadPaths: function(specs) {
    var paths;
    assertType(specs, Array);
    paths = [];
    return Promise.all(specs, function(spec) {
      var file, files, i, len, parent;
      assertType(spec, String);
      if (!path.isAbsolute(spec)) {
        parent = spec[0] === "." ? process.cwd() : lotus.path;
        spec = path.resolve(parent, spec);
      }
      if (!fs.isDir(spec)) {
        paths.push(spec);
        return;
      }
      files = fs.readDir(spec);
      for (i = 0, len = files.length; i < len; i++) {
        file = files[i];
        file = path.join(spec, file);
        if (fs.isFile(file)) {
          paths.push(file);
        }
      }
    }).then(function() {
      return paths;
    });
  }
});

module.exports = Runner = type.build();
